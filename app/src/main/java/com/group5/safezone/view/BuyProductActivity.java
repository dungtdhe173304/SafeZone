package com.group5.safezone.view;

import android.app.AlertDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.group5.safezone.R;
import com.group5.safezone.adapter.ProductAdapter.ProductImagesAdapter;
import com.group5.safezone.config.AppDatabase;
import com.group5.safezone.config.SessionManager;
import com.group5.safezone.model.dao.OrderDao;
import com.group5.safezone.model.dao.ProductDao;
import com.group5.safezone.model.dao.UserDao;
import com.group5.safezone.model.dao.TransactionsDao;
import com.group5.safezone.model.entity.Order;
import com.group5.safezone.model.entity.Product;
import com.group5.safezone.model.entity.ProductImages;
import com.group5.safezone.model.entity.User;
import com.group5.safezone.model.entity.Transactions;
import com.group5.safezone.view.Wallet.WalletActivity;
import com.group5.safezone.view.PurchaseHistoryActivity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class BuyProductActivity extends AppCompatActivity {
    
    // UI Components
    private ImageButton btnBack;
    private RecyclerView rvProductImages;
    private TextView tvProductName, tvProductDescription, tvSellerInfo, tvProductPrice, tvFeeInfo;
    private TextView tvTotalPrice, tvUserBalance;
    private Button btnDeposit, btnBuyNow;
    
    // Data
    private Product product;
    private List<ProductImages> productImages;
    private String sellerUsername;
    private double currentPrice;
    private double userBalance;
    private int currentUserId;
    private boolean isPurchasing = false;
    
    // Database
    private ProductDao productDao;
    private UserDao userDao;
    private OrderDao orderDao;
    private TransactionsDao transactionsDao;
    private ExecutorService executor;
    private SessionManager sessionManager;
    
    // Constants
    public static final String EXTRA_PRODUCT_ID = "product_id";
    public static final String EXTRA_PRODUCT_PRICE = "product_price";
    public static final String EXTRA_SELLER_USERNAME = "seller_username";
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_buy_product);
        
        initViews();
        setupDatabase();
        loadProductData();
        setupListeners();
        loadUserBalance();
    }
    
    private void initViews() {
        btnBack = findViewById(R.id.btnBack);
        rvProductImages = findViewById(R.id.rvProductImages);
        tvProductName = findViewById(R.id.tvProductName);
        tvProductDescription = findViewById(R.id.tvProductDescription);
        tvSellerInfo = findViewById(R.id.tvSellerInfo);
        tvProductPrice = findViewById(R.id.tvProductPrice);
        tvFeeInfo = findViewById(R.id.tvFeeInfo);
        tvTotalPrice = findViewById(R.id.tvTotalPrice);
        tvUserBalance = findViewById(R.id.tvUserBalance);
        btnDeposit = findViewById(R.id.btnDeposit);
        btnBuyNow = findViewById(R.id.btnBuyNow);
    }
    
    private void setupDatabase() {
        AppDatabase db = AppDatabase.getDatabase(this);
        productDao = db.productDao();
        userDao = db.userDao();
        orderDao = db.orderDao();
        transactionsDao = db.transactionsDao();
        executor = Executors.newSingleThreadExecutor();
        sessionManager = new SessionManager(this);
        currentUserId = sessionManager.getUserId();
    }
    
    private void loadProductData() {
        String productId = getIntent().getStringExtra(EXTRA_PRODUCT_ID);
        currentPrice = getIntent().getDoubleExtra(EXTRA_PRODUCT_PRICE, 0);
        sellerUsername = getIntent().getStringExtra(EXTRA_SELLER_USERNAME);
        
        if (productId == null) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }
        
        // Load product from database
        executor.execute(() -> {
            Product dbProduct = productDao.getProductById(productId);
            List<ProductImages> dbImages = AppDatabase.getDatabase(this).productImagesDao().getImagesByProductId(productId);
            
            runOnUiThread(() -> {
                if (dbProduct != null) {
                    this.product = dbProduct;
                    this.productImages = dbImages;
                    displayProductInfo();
                    updateTotalPrice();
                } else {
                    Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show();
                    finish();
                }
            });
        });
    }
    
    private void displayProductInfo() {
        if (product == null) return;
        
        tvProductName.setText(product.getProductName());
        tvProductDescription.setText(product.getDescribe() != null ? product.getDescribe() : "Kh√¥ng c√≥ m√¥ t·∫£");
        tvSellerInfo.setText("Ng∆∞·ªùi b√°n: " + sellerUsername);
        tvProductPrice.setText("Gi√°: " + formatPrice(product.getPrice()));
        
        // Display fee info
        String feeInfo = product.getFee() == 1 ? "Ph√≠: Ng∆∞·ªùi b√°n ch·ªãu" : "Ph√≠: Ng∆∞·ªùi mua ch·ªãu";
        tvFeeInfo.setText(feeInfo);
        
        // Setup product images
        if (productImages != null && !productImages.isEmpty()) {
            ProductImagesAdapter adapter = new ProductImagesAdapter();
            List<String> imagePaths = new ArrayList<>();
            for (ProductImages img : productImages) {
                if (img.getPath() != null) {
                    imagePaths.add(img.getPath());
                }
            }
            adapter.updateImages(productImages);
            rvProductImages.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
            rvProductImages.setAdapter(adapter);
        }
    }
    
    private void setupListeners() {
        btnBack.setOnClickListener(v -> finish());
        
        btnDeposit.setOnClickListener(v -> {
            Intent intent = new Intent(this, WalletActivity.class);
            startActivity(intent);
        });
        
        btnBuyNow.setOnClickListener(v -> showPurchaseConfirmationDialog());
    }
    
    private void updateTotalPrice() {
        if (product != null) {
            double total = product.getPrice() * 1; // Quantity is always 1
            tvTotalPrice.setText(formatPrice(total));
        }
    }
    
    private void loadUserBalance() {
        executor.execute(() -> {
            User user = userDao.getUserById(currentUserId);
            if (user != null) {
                userBalance = user.getBalance() != null ? user.getBalance() : 0;
                runOnUiThread(() -> tvUserBalance.setText(formatPrice(userBalance)));
            }
        });
    }
    
    private void showPurchaseConfirmationDialog() {
        if (product == null) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show();
            return;
        }
        
        double totalCost = product.getPrice() * 1; // Quantity is always 1
        String confirmMessage = "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën mua s·∫£n ph·∫©m n√†y?\n\n" +
                "S·∫£n ph·∫©m: " + product.getProductName() + "\n" +
                "Ng∆∞·ªùi b√°n: " + sellerUsername + "\n" +
                "T·ªïng ti·ªÅn: " + formatPrice(totalCost) + "\n\n" +
                "S·ªë d∆∞ hi·ªán t·∫°i: " + formatPrice(userBalance) + "\n\n" +
                "üé• L∆ØU √ù QUAN TR·ªåNG:\n" +
                "‚Ä¢ H√£y ch·ª•p ·∫£nh/quay video s·∫£n ph·∫©m khi nh·∫≠n h√†ng\n" +
                "‚Ä¢ Ki·ªÉm tra k·ªπ ch·∫•t l∆∞·ª£ng v√† th√¥ng tin s·∫£n ph·∫©m\n" +
                "‚Ä¢ L∆∞u l·∫°i b·∫±ng ch·ª©ng ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p tranh ch·∫•p\n" +
                "‚Ä¢ SafeZone s·∫Ω h·ªó tr·ª£ gi·∫£i quy·∫øt n·∫øu c√≥ v·∫•n ƒë·ªÅ";
        
        new AlertDialog.Builder(this)
            .setTitle("‚ö†Ô∏è X√°c nh·∫≠n mua h√†ng")
            .setMessage(confirmMessage)
            .setIcon(R.drawable.ic_shopping_bag)
            .setPositiveButton("T√¥i ƒë√£ hi·ªÉu, ti·∫øp t·ª•c mua", (dialog, which) -> {
                validateAndBuy();
            })
            .setNegativeButton("H·ªßy", (dialog, which) -> {
                // User cancelled, do nothing
            })
            .setCancelable(false)
            .show();
    }

    private void validateAndBuy() {
        if (product == null) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show();
            return;
        }
        
        // Prevent double purchase
        if (isPurchasing) {
            Toast.makeText(this, "ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng, vui l√≤ng ƒë·ª£i...", Toast.LENGTH_SHORT).show();
            return;
        }
        
        isPurchasing = true;
        btnBuyNow.setEnabled(false);
        btnBuyNow.setText("ƒêang x·ª≠ l√Ω...");
        
        // Check if product info has changed
        executor.execute(() -> {
            Product currentProduct = productDao.getProductById(product.getId());
            
            if (currentProduct == null) {
                runOnUiThread(() -> {
                    resetPurchaseState();
                    Toast.makeText(this, "S·∫£n ph·∫©m kh√¥ng c√≤n t·ªìn t·∫°i", Toast.LENGTH_SHORT).show();
                    finish();
                });
                return;
            }
            
            // Check if price or other info has changed
            if (!currentProduct.getPrice().equals(product.getPrice()) || 
                !currentProduct.getProductName().equals(product.getProductName())) {
                runOnUiThread(() -> {
                    resetPurchaseState();
                    showProductChangedDialog();
                });
                return;
            }
            
            // Check user balance
            double totalCost = product.getPrice() * 1; // Quantity is always 1
            if (userBalance < totalCost) {
                runOnUiThread(() -> {
                    resetPurchaseState();
                    showInsufficientBalanceDialog(totalCost);
                });
                return;
            }
            
            // Proceed with purchase
            runOnUiThread(() -> {
                processPurchase(totalCost);
            });
        });
    }
    
    private void showProductChangedDialog() {
        new AlertDialog.Builder(this)
            .setTitle("Th√¥ng tin s·∫£n ph·∫©m ƒë√£ thay ƒë·ªïi")
            .setMessage("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ch·ªß c·∫≠p nh·∫≠t l·∫°i. Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi mua.")
            .setPositiveButton("Xem l·∫°i", (dialog, which) -> {
                // Reload product data
                loadProductData();
            })
            .setNegativeButton("H·ªßy", (dialog, which) -> {
                finish();
            })
            .setCancelable(false)
            .show();
    }
    
    private void showInsufficientBalanceDialog(double requiredAmount) {
        new AlertDialog.Builder(this)
            .setTitle("S·ªë d∆∞ kh√¥ng ƒë·ªß")
            .setMessage("B·∫°n c·∫ßn " + formatPrice(requiredAmount) + " ƒë·ªÉ mua s·∫£n ph·∫©m n√†y. S·ªë d∆∞ hi·ªán t·∫°i: " + formatPrice(userBalance))
            .setPositiveButton("N·∫°p ti·ªÅn", (dialog, which) -> {
                Intent intent = new Intent(this, WalletActivity.class);
                startActivity(intent);
            })
            .setNegativeButton("H·ªßy", null)
            .show();
    }
    
    private void processPurchase(double totalCost) {
        // Create order
        Order order = new Order();
        order.setProductId(product.getId());
        order.setUserId(currentUserId);
        order.setPrice(totalCost);
        order.setQuantity(1); // Quantity is always 1
        order.setStatus("ch·ªù ng∆∞·ªùi mua x√°c nh·∫≠n nh·∫≠n");
        order.setNote(getNoteText());
        order.setOrderDate(new Date());
        
        // Save order and update balance
        executor.execute(() -> {
            try {
                // Insert order and get the generated ID
                long orderId = orderDao.insert(order);
                
                // Create transaction record for purchase
                Transactions purchaseTransaction = new Transactions();
                purchaseTransaction.setUserId(currentUserId);
                purchaseTransaction.setRelatedUserId(product.getUserId()); // Seller ID
                purchaseTransaction.setOrderId((int) orderId);
                purchaseTransaction.setTransactionType("Mua s·∫£n ph·∫©m");
                purchaseTransaction.setAmount(totalCost);
                purchaseTransaction.setStatus("Ho√†n th√†nh");
                purchaseTransaction.setDescription("Mua s·∫£n ph·∫©m: " + product.getProductName() + " t·ª´ " + sellerUsername);
                
                // Insert transaction
                transactionsDao.insert(purchaseTransaction);
                
                // Update user balance
                User user = userDao.getUserById(currentUserId);
                if (user != null) {
                    user.setBalance(user.getBalance() - totalCost);
                    userDao.updateUser(user);
                    
                    // Update UI
                    runOnUiThread(() -> {
                        userBalance = user.getBalance();
                        tvUserBalance.setText(formatPrice(userBalance));
                        
                        // Show success dialog
                        showPurchaseSuccessDialog(orderId);
                    });
                }
            } catch (Exception e) {
                runOnUiThread(() -> {
                    resetPurchaseState();
                    Toast.makeText(this, "L·ªói khi t·∫°o ƒë∆°n h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void showPurchaseSuccessDialog(long orderId) {
        String successMessage = "ƒê∆°n h√†ng #" + orderId + " ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi tr·∫°ng th√°i 'ch·ªù ng∆∞·ªùi mua x√°c nh·∫≠n nh·∫≠n'.\n\n" +
                "üìã NH·∫ÆC NH·ªû QUAN TR·ªåNG:\n" +
                "‚Ä¢ Khi nh·∫≠n h√†ng, h√£y ch·ª•p ·∫£nh/quay video\n" +
                "‚Ä¢ Ki·ªÉm tra k·ªπ s·∫£n ph·∫©m tr∆∞·ªõc khi x√°c nh·∫≠n\n" +
                "‚Ä¢ L∆∞u gi·ªØ b·∫±ng ch·ª©ng ƒë·ªÉ b·∫£o v·ªá quy·ªÅn l·ª£i\n" +
                "‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu c√≥ v·∫•n ƒë·ªÅ\n\n" +
                "üîí SafeZone cam k·∫øt b·∫£o v·ªá ng∆∞·ªùi mua!";
        
        new AlertDialog.Builder(this)
            .setTitle("üéâ Mua h√†ng th√†nh c√¥ng!")
            .setMessage(successMessage)
            .setPositiveButton("Xem l·ªãch s·ª≠ mua h√†ng", (dialog, which) -> {
                // Navigate to purchase history
                Intent intent = new Intent(this, PurchaseHistoryActivity.class);
                startActivity(intent);
                finish();
            })
            .setNegativeButton("ƒê√≥ng", (dialog, which) -> {
                finish();
            })
            .setCancelable(false)
            .show();
    }
    
    private String getNoteText() {
        TextView etNote = findViewById(R.id.etNote);
        return etNote.getText().toString().trim();
    }
    
    private String formatPrice(double price) {
        return String.format("%,.0f VNƒê", price);
    }
    
    private void resetPurchaseState() {
        isPurchasing = false;
        btnBuyNow.setEnabled(true);
        btnBuyNow.setText("MUA NGAY");
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        // Reload user balance when returning from wallet
        loadUserBalance();
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (executor != null) {
            executor.shutdown();
        }
    }
}
